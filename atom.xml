<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yachen</title>
  <icon>https://yachen168.github.io/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yachen168.github.io/"/>
  <updated>2022-05-21T20:30:27.946Z</updated>
  <id>https://yachen168.github.io/</id>
  
  <author>
    <name>yachen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一起成為 MDN 的貢獻者吧!</title>
    <link href="https://yachen168.github.io/article/pr-mdn.html"/>
    <id>https://yachen168.github.io/article/pr-mdn.html</id>
    <published>2022-05-21T03:50:38.000Z</published>
    <updated>2022-05-21T20:30:27.946Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;身為一個 web developer，查找 MDN 應該是家常便飯，某天在查找 MDN docs 時，突然注意到最底下這個區塊(以前都視而不見)…那天滑鼠不知為何就這樣點了進去，然後突然覺得發現新大陸🐒，加上原本正打算好好的看一下某個主題的 MDN API docs，於是就興起了一邊看 MDN docs 一邊幫忙翻譯的衝動。後來發 PR(Pull Request) 也意外的順利通過，決定來整理一下重點和注意事項，提供給想對 MDN 文件內容進行勘誤或是幫忙更新文件人做參考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="developer" scheme="https://yachen168.github.io/categories/developer/"/>
    
    
      <category term="MDN" scheme="https://yachen168.github.io/tags/MDN/"/>
    
      <category term="Contributors" scheme="https://yachen168.github.io/tags/Contributors/"/>
    
      <category term="developer" scheme="https://yachen168.github.io/tags/developer/"/>
    
      <category term="PR" scheme="https://yachen168.github.io/tags/PR/"/>
    
  </entry>
  
  <entry>
    <title>React Native - 打包 AAB(APK)</title>
    <link href="https://yachen168.github.io/article/rn-apk.html"/>
    <id>https://yachen168.github.io/article/rn-apk.html</id>
    <published>2021-07-24T16:48:48.000Z</published>
    <updated>2021-07-24T19:56:13.506Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;這系列文章將一步步介紹如何在 mac 上搭建 Android 和 ios 的開發環境(React Native ClI)、如何在模擬器和實體裝置中運行、如何打包 AAB(APK) 和 IPA。&lt;/p&gt;
&lt;p&gt;而這篇將介紹如何&lt;b&gt;將你的 RN 專案打包成 AAB(APK)！&lt;/b&gt;，如果你還沒建置好 Android 的開發環境，請先跟著:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yachen168.github.io/article/rn-environment-android.html#more&quot;&gt;React Native 開發環境建置 - Android 篇(上)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://yachen168.github.io/article/rn-hello-world.html#more&quot;&gt;React Native 開發環境建置 - Android 篇(下)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;的步驟設定 Android 開發環境和建立 RN 專案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="App" scheme="https://yachen168.github.io/categories/App/"/>
    
    
      <category term="React Native" scheme="https://yachen168.github.io/tags/React-Native/"/>
    
      <category term="Android" scheme="https://yachen168.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>React Native 開發環境建置 - Android 篇(下)</title>
    <link href="https://yachen168.github.io/article/rn-hello-world.html"/>
    <id>https://yachen168.github.io/article/rn-hello-world.html</id>
    <published>2021-07-24T13:30:48.000Z</published>
    <updated>2021-07-24T18:58:30.583Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;這系列文章將一步步介紹如何在 mac 上搭建 Android 和 ios 的開發環境(React Native ClI)、如何在模擬器和實體裝置中運行、如何打包 AAB(APK) 和 IPA。&lt;/p&gt;
&lt;p&gt;會選擇 React Native ClI 而不是較友善的 Expo ClL 是因為筆者之後想要在 RN 上用 WebRTC，考慮到支援度的問題，所以選擇 React Native ClI。&lt;/p&gt;
&lt;p&gt;而這篇將介紹如何在&lt;b&gt;模擬器(Android Studio)和實體裝置中運行你的 RN 專案！&lt;/b&gt;在閱讀這篇文章之前，請先確實按照上一篇 &lt;a href=&quot;https://yachen168.github.io/article/rn-environment-android.html#more&quot;&gt;React Native 開發環境建置 - Android 篇(上)&lt;/a&gt; 的步驟進行相關的 Android 開發環境設定。&lt;/p&gt;
    
    </summary>
    
    
      <category term="App" scheme="https://yachen168.github.io/categories/App/"/>
    
    
      <category term="React Native" scheme="https://yachen168.github.io/tags/React-Native/"/>
    
      <category term="Android" scheme="https://yachen168.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>React Native 開發環境建置 - Android 篇(上)</title>
    <link href="https://yachen168.github.io/article/rn-environment-android.html"/>
    <id>https://yachen168.github.io/article/rn-environment-android.html</id>
    <published>2021-07-24T08:48:48.000Z</published>
    <updated>2021-07-24T18:58:24.882Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;這系列文章將一步步介紹如何在 mac 上搭建 Android 和 ios 的開發環境(React Native ClI)、如何在模擬器和實體裝置中運行、如何打包 AAB(APK) 和 IPA。因為筆者覺得 ios 比較複(機)雜(車)，所以會先從 Android 開始介紹。&lt;/p&gt;
&lt;p&gt;會選擇 React Native ClI 而不是較友善的 Expo ClL 是因為筆者之後想要在 RN 上用 WebRTC，考慮到支援度的問題，所以選擇 React Native ClI。&lt;/p&gt;
    
    </summary>
    
    
      <category term="App" scheme="https://yachen168.github.io/categories/App/"/>
    
    
      <category term="React Native" scheme="https://yachen168.github.io/tags/React-Native/"/>
    
      <category term="Android" scheme="https://yachen168.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 Composition API - Teleport 瞬移!</title>
    <link href="https://yachen168.github.io/article/composition-api-teleport.html"/>
    <id>https://yachen168.github.io/article/composition-api-teleport.html</id>
    <published>2021-01-24T12:40:37.000Z</published>
    <updated>2021-01-24T18:42:33.580Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Vue3 Composition API 新增了 Teleport 功能，讓我們可以輕鬆的將組件傳送到指定的地方，很酷的是，它還能夠保存狀態!&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="Vue3" scheme="https://yachen168.github.io/tags/Vue3/"/>
    
      <category term="composition API" scheme="https://yachen168.github.io/tags/composition-API/"/>
    
  </entry>
  
  <entry>
    <title>讓網頁平滑滾動!</title>
    <link href="https://yachen168.github.io/article/Smooth-Scrolling.html"/>
    <id>https://yachen168.github.io/article/Smooth-Scrolling.html</id>
    <published>2021-01-05T08:09:05.000Z</published>
    <updated>2021-01-05T09:14:01.663Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在網頁開發中，錨點算是個常見的需求，例如：在點擊按鈕後，畫面想要蝦趴的「滑」到頂部。&lt;/p&gt;
&lt;p&gt;這種平滑的滾動效果，其實只要加一行 CSS 就可以辦得到，無需勞動到 JS，也就是今天要介紹的 &lt;code&gt;scroll-behavior&lt;/code&gt; 屬性，直接進入實作吧!&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 閉包與範圍 ── Execution Context</title>
    <link href="https://yachen168.github.io/article/JavaScript%E9%96%89%E5%8C%85%E8%88%87%E7%AF%84%E5%9C%8Dexecution-context.html"/>
    <id>https://yachen168.github.io/article/JavaScript%E9%96%89%E5%8C%85%E8%88%87%E7%AF%84%E5%9C%8Dexecution-context.html</id>
    <published>2020-06-21T13:27:57.000Z</published>
    <updated>2020-06-22T04:08:57.847Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;閉包(closure)在 JavaScript 中佔著重要的地位，但閉包本人其實不太好搞，先從與閉包密不可分的 ── 作用範圍(Scope)開始下手吧！這篇將從執行背景空間(execution context)開始介紹，一步步看 JavaScript 引擎是如何追蹤程式碼的執行，然後…等時機到了就會知道什麼是閉包了(吧)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
      <category term="JavaScript" scheme="https://yachen168.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>用純 CSS 做定格動畫</title>
    <link href="https://yachen168.github.io/article/%E7%94%A8%E7%B4%94CSS%E5%81%9A%E5%AE%9A%E6%A0%BC%E5%8B%95%E7%95%AB.html"/>
    <id>https://yachen168.github.io/article/%E7%94%A8%E7%B4%94CSS%E5%81%9A%E5%AE%9A%E6%A0%BC%E5%8B%95%E7%95%AB.html</id>
    <published>2020-06-13T04:54:55.000Z</published>
    <updated>2020-06-13T10:10:34.664Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;什麼是定格動畫？簡單來說，是一種動畫技術，它的原理是將每幀不同的圖像快速播放，因人眼有視覺暫留，所以會產生動畫效果。小時候玩的手翻書就是以這樣的原理來達成動畫的效果！&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>解決 Vue.js-devtools 無法開啟問題</title>
    <link href="https://yachen168.github.io/article/vue-devtools%E7%84%A1%E6%B3%95%E9%96%8B%E5%95%9F.html"/>
    <id>https://yachen168.github.io/article/vue-devtools%E7%84%A1%E6%B3%95%E9%96%8B%E5%95%9F.html</id>
    <published>2020-06-08T17:18:59.000Z</published>
    <updated>2020-07-02T12:03:02.293Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;相信用過 Vue.js 的應該都有裝 Vue.js-devtools (吧)。&lt;/p&gt;
&lt;p&gt;最近發現若是單純以引入 &lt;code&gt;CDN&lt;/code&gt; 的方式使用 Vue，而非用 &lt;a href=&quot;https://cli.vuejs.org/zh/&quot;&gt;Vue CLI&lt;/a&gt;，會出現 &lt;a href=&quot;https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd&quot;&gt;Vue.js-devtools&lt;/a&gt; 無法正常開啟的情況。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="Vue" scheme="https://yachen168.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>三種改變函式內部 this 的方式：apply()、call()、bind()</title>
    <link href="https://yachen168.github.io/article/%E6%94%B9%E8%AE%8A%E5%87%BD%E5%BC%8F%E7%9A%84this.html"/>
    <id>https://yachen168.github.io/article/%E6%94%B9%E8%AE%8A%E5%87%BD%E5%BC%8F%E7%9A%84this.html</id>
    <published>2020-06-04T09:29:48.000Z</published>
    <updated>2020-06-10T06:55:48.570Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在 JavaScript 中，改變函數內部 this 的指向常見的方式有 &lt;code&gt;call()&lt;/code&gt;、&lt;code&gt;apply()&lt;/code&gt;、&lt;code&gt;bind()&lt;/code&gt;，而這三種方式又存在些微差異。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
      <category term="JavaScript" scheme="https://yachen168.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Flex(下)</title>
    <link href="https://yachen168.github.io/article/Flex3.html"/>
    <id>https://yachen168.github.io/article/Flex3.html</id>
    <published>2020-05-11T02:53:54.000Z</published>
    <updated>2020-06-04T10:07:10.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;vertical-align、text-align 甚至 float 都是控制不了 flex items 的，flex 有自己專屬的對齊屬性，而因對齊分為水平對齊與垂直對齊，所以首先要先認清楚誰是主軸(main axis)誰是副軸(cross axis)，才不會精神分裂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Flex(中)</title>
    <link href="https://yachen168.github.io/article/Flex2.html"/>
    <id>https://yachen168.github.io/article/Flex2.html</id>
    <published>2020-05-10T07:54:33.000Z</published>
    <updated>2022-05-19T15:35:57.237Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;這篇將介紹 flex 屬性，並且深入探討 flex 究竟是如何計算伸縮的比例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Flex(上)</title>
    <link href="https://yachen168.github.io/article/Flex.html"/>
    <id>https://yachen168.github.io/article/Flex.html</id>
    <published>2020-05-08T05:32:37.000Z</published>
    <updated>2020-06-04T10:33:11.843Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;接下來將介紹 flex，從先前 &lt;a href=&quot;https://yachen168.github.io/article/Formatting-context.html&quot;&gt;formatting context&lt;/a&gt; 的觀念開始，再詳細介紹每個屬性的用法以及 flex box 伸縮的計算方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - position</title>
    <link href="https://yachen168.github.io/article/Position.html"/>
    <id>https://yachen168.github.io/article/Position.html</id>
    <published>2020-03-31T12:03:24.000Z</published>
    <updated>2020-06-04T10:09:47.982Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;這篇要介紹的是 position，顧名思義，它與元素的位置或定位方式有關，了解它的各種屬性值肯定是必要的，像是常見的彈跳視窗或固定導覽列，也都需要它。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Block Formatting Context</title>
    <link href="https://yachen168.github.io/article/Block-formatting-context.html"/>
    <id>https://yachen168.github.io/article/Block-formatting-context.html</id>
    <published>2020-03-12T08:35:37.000Z</published>
    <updated>2020-06-04T10:07:15.960Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;或許你沒聽過 Block Formatting Context，但你肯定有用過！其實在切版時，常常會使用到 BFC，只是你沒有意識到而已，如果能夠有意識的使用 BFC，對於版面的掌控非常有幫助。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Formatting Context</title>
    <link href="https://yachen168.github.io/article/Formatting-context.html"/>
    <id>https://yachen168.github.io/article/Formatting-context.html</id>
    <published>2020-03-04T07:23:52.000Z</published>
    <updated>2020-06-04T10:09:37.217Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;每個元素都是一個個的盒子(box)，這些盒子在 in flow 下會如何排列就要看該盒子處在什麼樣的佈局環境，而 formatting context (格式化上下文) 指的就是佈局環境，不同類型的佈局環境會有不同的佈局規則，換句話說，處在不同類型佈局環境裡的盒子，排列方式會有所不同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Line box</title>
    <link href="https://yachen168.github.io/article/LineBox.html"/>
    <id>https://yachen168.github.io/article/LineBox.html</id>
    <published>2020-02-23T03:58:29.000Z</published>
    <updated>2020-06-04T10:09:41.702Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Line box 就像筆記本上的線框，一行一行的垂直堆疊，裡面裝著文字或是 inline-level boxes，而我們可以利用 text-align 與 vertical-align 屬性操控 inline-level boxes 在 line box 裡的水平與垂直對齊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - 你所不知道的 display</title>
    <link href="https://yachen168.github.io/article/display.html"/>
    <id>https://yachen168.github.io/article/display.html</id>
    <published>2020-02-15T08:48:59.000Z</published>
    <updated>2020-06-04T10:09:15.083Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Visual formatting model (視覺格式化模型) 對於排版來說是很重要的觀念，但不是那麼平易近人且有點抽象，在初次看 &lt;a href=&quot;https://www.w3.org/TR/CSS2/visuren.html&quot;&gt;W3C 規範&lt;/a&gt; 時一定是霧煞煞，強烈建議先釐清幾個重要名詞的定義，會發現繞來繞去，講的其實都是相同的概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Collapsing margins</title>
    <link href="https://yachen168.github.io/article/Collapsing-margins.html"/>
    <id>https://yachen168.github.io/article/Collapsing-margins.html</id>
    <published>2020-02-11T15:22:02.000Z</published>
    <updated>2020-06-04T10:09:25.224Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什麼是-Collapsing-margins？&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#什麼是-Collapsing-margins？&quot;&gt;&lt;/a&gt;什麼是 Collapsing margins？&lt;/h2&gt;
&lt;p&gt;先來看一段 &lt;a href=&quot;https://www.w3.org/TR/CSS2/box.html#collapsing-margins&quot;&gt;W3C 規範&lt;/a&gt; 的敘述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In CSS, the adjoining margins of two or more boxes (which might or might not be siblings) can combine to form a single margin. Margins that combine this way are said to collapse, and the resulting combined margin is called a collapsed margin.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 原理 - Containing block</title>
    <link href="https://yachen168.github.io/article/Containing-block.html"/>
    <id>https://yachen168.github.io/article/Containing-block.html</id>
    <published>2020-02-08T18:27:51.000Z</published>
    <updated>2020-06-04T10:09:20.454Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Containing block，中文常被翻譯為包含塊，它其實代表的是一個「區域」，一個由 box model 的 content edge 或 padding edge (若有設定 padding)所圍繞的範圍，它攸關元素的定位、寬高、內距與外距的計算，所以必須清楚知道元素的 containing block 是誰，才不會使畫面失控。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://yachen168.github.io/categories/web/"/>
    
    
      <category term="w3HexSchool" scheme="https://yachen168.github.io/tags/w3HexSchool/"/>
    
      <category term="CSS" scheme="https://yachen168.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
